{
  "version": 3,
  "sources": ["../../../node_modules/@radix-ui/react-navigation-menu/node_modules/@radix-ui/react-dismissable-layer/dist/packages/react/dismissable-layer/src/index.ts", "../../../node_modules/@radix-ui/react-navigation-menu/node_modules/@radix-ui/react-dismissable-layer/dist/packages/react/dismissable-layer/src/DismissableLayer.tsx", "../../../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/index.ts", "../../../node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx", "../../../node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/index.ts", "../../../node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/VisuallyHidden.tsx", "../../../node_modules/@radix-ui/react-navigation-menu/dist/packages/react/navigation-menu/src/index.ts", "../../../node_modules/@radix-ui/react-navigation-menu/dist/packages/react/navigation-menu/src/NavigationMenu.tsx", "../../../app/routes/_panel.tsx"],
  "sourcesContent": ["export {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n} from './DismissableLayer';\nexport type { DismissableLayerProps } from './DismissableLayer';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n", "export { usePrevious } from './usePrevious';\n", "import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n", "export {\n  VisuallyHidden,\n  //\n  Root,\n} from './VisuallyHidden';\nexport type { VisuallyHiddenProps } from './VisuallyHidden';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * VisuallyHidden\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'VisuallyHidden';\n\ntype VisuallyHiddenElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface VisuallyHiddenProps extends PrimitiveSpanProps {}\n\nconst VisuallyHidden = React.forwardRef<VisuallyHiddenElement, VisuallyHiddenProps>(\n  (props, forwardedRef) => {\n    return (\n      <Primitive.span\n        {...props}\n        ref={forwardedRef}\n        style={{\n          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss\n          position: 'absolute',\n          border: 0,\n          width: 1,\n          height: 1,\n          padding: 0,\n          margin: -1,\n          overflow: 'hidden',\n          clip: 'rect(0, 0, 0, 0)',\n          whiteSpace: 'nowrap',\n          wordWrap: 'normal',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nVisuallyHidden.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = VisuallyHidden;\n\nexport {\n  VisuallyHidden,\n  //\n  Root,\n};\nexport type { VisuallyHiddenProps };\n", "export {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n} from './NavigationMenu';\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n} from './NavigationMenu';\n", "/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeRefs, useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Orientation = 'vertical' | 'horizontal';\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAVIGATION_MENU_NAME = 'NavigationMenu';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  NavigationMenuTriggerElement,\n  { value: string }\n>(NAVIGATION_MENU_NAME);\n\nconst [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] =\n  createCollection<FocusGroupItemElement, {}>(NAVIGATION_MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeNavigationMenu?: Scope };\nconst [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(\n  NAVIGATION_MENU_NAME,\n  [createCollectionScope, createFocusGroupCollectionScope]\n);\n\ntype ContentData = {\n  ref?: React.Ref<ViewportContentMounterElement>;\n} & ViewportContentMounterProps;\n\ntype NavigationMenuContextValue = {\n  isRootMenu: boolean;\n  value: string;\n  previousValue: string;\n  baseId: string;\n  dir: Direction;\n  orientation: Orientation;\n  rootNavigationMenu: NavigationMenuElement | null;\n  indicatorTrack: HTMLDivElement | null;\n  onIndicatorTrackChange(indicatorTrack: HTMLDivElement | null): void;\n  viewport: NavigationMenuViewportElement | null;\n  onViewportChange(viewport: NavigationMenuViewportElement | null): void;\n  onViewportContentChange(contentValue: string, contentData: ContentData): void;\n  onViewportContentRemove(contentValue: string): void;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave(): void;\n  onContentEnter(): void;\n  onContentLeave(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n};\n\nconst [NavigationMenuProviderImpl, useNavigationMenuContext] =\n  createNavigationMenuContext<NavigationMenuContextValue>(NAVIGATION_MENU_NAME);\n\nconst [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext<{\n  items: Map<string, ContentData>;\n}>(NAVIGATION_MENU_NAME);\n\ntype NavigationMenuElement = React.ElementRef<typeof Primitive.nav>;\ntype PrimitiveNavProps = Radix.ComponentPropsWithoutRef<typeof Primitive.nav>;\ninterface NavigationMenuProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveNavProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  dir?: Direction;\n  orientation?: Orientation;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 200\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst NavigationMenu = React.forwardRef<NavigationMenuElement, NavigationMenuProps>(\n  (props: ScopedProps<NavigationMenuProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      delayDuration = 200,\n      skipDelayDuration = 300,\n      orientation = 'horizontal',\n      dir,\n      ...NavigationMenuProps\n    } = props;\n    const [navigationMenu, setNavigationMenu] = React.useState<NavigationMenuElement | null>(null);\n    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));\n    const direction = useDirection(dir);\n    const openTimerRef = React.useRef(0);\n    const closeTimerRef = React.useRef(0);\n    const skipDelayTimerRef = React.useRef(0);\n    const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: (value) => {\n        const isOpen = value !== '';\n        const hasSkipDelayDuration = skipDelayDuration > 0;\n\n        if (isOpen) {\n          window.clearTimeout(skipDelayTimerRef.current);\n          if (hasSkipDelayDuration) setIsOpenDelayed(false);\n        } else {\n          window.clearTimeout(skipDelayTimerRef.current);\n          skipDelayTimerRef.current = window.setTimeout(\n            () => setIsOpenDelayed(true),\n            skipDelayDuration\n          );\n        }\n\n        onValueChange?.(value);\n      },\n      defaultProp: defaultValue,\n    });\n\n    const startCloseTimer = React.useCallback(() => {\n      window.clearTimeout(closeTimerRef.current);\n      closeTimerRef.current = window.setTimeout(() => setValue(''), 150);\n    }, [setValue]);\n\n    const handleOpen = React.useCallback(\n      (itemValue: string) => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      },\n      [setValue]\n    );\n\n    const handleDelayedOpen = React.useCallback(\n      (itemValue: string) => {\n        const isOpenItem = value === itemValue;\n        if (isOpenItem) {\n          // If the item is already open (e.g. we're transitioning from the content to the trigger)\n          // then we want to clear the close timer immediately.\n          window.clearTimeout(closeTimerRef.current);\n        } else {\n          openTimerRef.current = window.setTimeout(() => {\n            window.clearTimeout(closeTimerRef.current);\n            setValue(itemValue);\n          }, delayDuration);\n        }\n      },\n      [value, setValue, delayDuration]\n    );\n\n    React.useEffect(() => {\n      return () => {\n        window.clearTimeout(openTimerRef.current);\n        window.clearTimeout(closeTimerRef.current);\n        window.clearTimeout(skipDelayTimerRef.current);\n      };\n    }, []);\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={true}\n        value={value}\n        dir={direction}\n        orientation={orientation}\n        rootNavigationMenu={navigationMenu}\n        onTriggerEnter={(itemValue) => {\n          window.clearTimeout(openTimerRef.current);\n          if (isOpenDelayed) handleDelayedOpen(itemValue);\n          else handleOpen(itemValue);\n        }}\n        onTriggerLeave={() => {\n          window.clearTimeout(openTimerRef.current);\n          startCloseTimer();\n        }}\n        onContentEnter={() => window.clearTimeout(closeTimerRef.current)}\n        onContentLeave={startCloseTimer}\n        onItemSelect={(itemValue) => {\n          setValue((prevValue) => (prevValue === itemValue ? '' : itemValue));\n        }}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.nav\n          aria-label=\"Main\"\n          data-orientation={orientation}\n          dir={direction}\n          {...NavigationMenuProps}\n          ref={composedRef}\n        />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'NavigationMenuSub';\n\ntype NavigationMenuSubElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface NavigationMenuSubProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  orientation?: Orientation;\n}\n\nconst NavigationMenuSub = React.forwardRef<NavigationMenuSubElement, NavigationMenuSubProps>(\n  (props: ScopedProps<NavigationMenuSubProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      ...subProps\n    } = props;\n    const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n    const [value = '', setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue,\n    });\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={false}\n        value={value}\n        dir={context.dir}\n        orientation={orientation}\n        rootNavigationMenu={context.rootNavigationMenu}\n        onTriggerEnter={(itemValue) => setValue(itemValue)}\n        onItemSelect={(itemValue) => setValue(itemValue)}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.div data-orientation={orientation} {...subProps} ref={forwardedRef} />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenuSub.displayName = SUB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface NavigationMenuProviderPrivateProps {\n  isRootMenu: boolean;\n  scope: Scope;\n  children: React.ReactNode;\n  orientation: Orientation;\n  dir: Direction;\n  rootNavigationMenu: NavigationMenuElement | null;\n  value: string;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave?(): void;\n  onContentEnter?(): void;\n  onContentLeave?(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n}\n\ninterface NavigationMenuProviderProps extends NavigationMenuProviderPrivateProps {}\n\nconst NavigationMenuProvider: React.FC<NavigationMenuProviderProps> = (\n  props: ScopedProps<NavigationMenuProviderProps>\n) => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave,\n  } = props;\n  const [viewport, setViewport] = React.useState<NavigationMenuViewportElement | null>(null);\n  const [viewportContent, setViewportContent] = React.useState<Map<string, ContentData>>(new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState<HTMLDivElement | null>(null);\n\n  return (\n    <NavigationMenuProviderImpl\n      scope={scope}\n      isRootMenu={isRootMenu}\n      rootNavigationMenu={rootNavigationMenu}\n      value={value}\n      previousValue={usePrevious(value)}\n      baseId={useId()}\n      dir={dir}\n      orientation={orientation}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      indicatorTrack={indicatorTrack}\n      onIndicatorTrackChange={setIndicatorTrack}\n      onTriggerEnter={useCallbackRef(onTriggerEnter)}\n      onTriggerLeave={useCallbackRef(onTriggerLeave)}\n      onContentEnter={useCallbackRef(onContentEnter)}\n      onContentLeave={useCallbackRef(onContentLeave)}\n      onItemSelect={useCallbackRef(onItemSelect)}\n      onItemDismiss={useCallbackRef(onItemDismiss)}\n      onViewportContentChange={React.useCallback((contentValue, contentData) => {\n        setViewportContent((prevContent) => {\n          prevContent.set(contentValue, contentData);\n          return new Map(prevContent);\n        });\n      }, [])}\n      onViewportContentRemove={React.useCallback((contentValue) => {\n        setViewportContent((prevContent) => {\n          if (!prevContent.has(contentValue)) return prevContent;\n          prevContent.delete(contentValue);\n          return new Map(prevContent);\n        });\n      }, [])}\n    >\n      <Collection.Provider scope={scope}>\n        <ViewportContentProvider scope={scope} items={viewportContent}>\n          {children}\n        </ViewportContentProvider>\n      </Collection.Provider>\n    </NavigationMenuProviderImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nconst LIST_NAME = 'NavigationMenuList';\n\ntype NavigationMenuListElement = React.ElementRef<typeof Primitive.ul>;\ntype PrimitiveUnorderedListProps = Radix.ComponentPropsWithoutRef<typeof Primitive.ul>;\ninterface NavigationMenuListProps extends PrimitiveUnorderedListProps {}\n\nconst NavigationMenuList = React.forwardRef<NavigationMenuListElement, NavigationMenuListProps>(\n  (props: ScopedProps<NavigationMenuListProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...listProps } = props;\n    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n\n    const list = (\n      <Primitive.ul data-orientation={context.orientation} {...listProps} ref={forwardedRef} />\n    );\n\n    return (\n      <Primitive.div style={{ position: 'relative' }} ref={context.onIndicatorTrackChange}>\n        <Collection.Slot scope={__scopeNavigationMenu}>\n          {context.isRootMenu ? <FocusGroup asChild>{list}</FocusGroup> : list}\n        </Collection.Slot>\n      </Primitive.div>\n    );\n  }\n);\n\nNavigationMenuList.displayName = LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'NavigationMenuItem';\n\ntype FocusProxyElement = React.ElementRef<typeof VisuallyHiddenPrimitive.Root>;\n\ntype NavigationMenuItemContextValue = {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  contentRef: React.RefObject<NavigationMenuContentElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onEntryKeyDown(): void;\n  onFocusProxyEnter(side: 'start' | 'end'): void;\n  onRootContentClose(): void;\n  onContentFocusOutside(): void;\n};\n\nconst [NavigationMenuItemContextProvider, useNavigationMenuItemContext] =\n  createNavigationMenuContext<NavigationMenuItemContextValue>(ITEM_NAME);\n\ntype NavigationMenuItemElement = React.ElementRef<typeof Primitive.li>;\ntype PrimitiveListItemProps = Radix.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface NavigationMenuItemProps extends PrimitiveListItemProps {\n  value?: string;\n}\n\nconst NavigationMenuItem = React.forwardRef<NavigationMenuItemElement, NavigationMenuItemProps>(\n  (props: ScopedProps<NavigationMenuItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;\n    const autoValue = useId();\n    // We need to provide an initial deterministic value as `useId` will return\n    // empty string on the first render and we don't want to match our internal \"closed\" value.\n    const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n    const contentRef = React.useRef<NavigationMenuContentElement>(null);\n    const triggerRef = React.useRef<NavigationMenuTriggerElement>(null);\n    const focusProxyRef = React.useRef<FocusProxyElement>(null);\n    const restoreContentTabOrderRef = React.useRef(() => {});\n    const wasEscapeCloseRef = React.useRef(false);\n\n    const handleContentEntry = React.useCallback((side = 'start') => {\n      if (contentRef.current) {\n        restoreContentTabOrderRef.current();\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) focusFirst(side === 'start' ? candidates : candidates.reverse());\n      }\n    }, []);\n\n    const handleContentExit = React.useCallback(() => {\n      if (contentRef.current) {\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n      }\n    }, []);\n\n    return (\n      <NavigationMenuItemContextProvider\n        scope={__scopeNavigationMenu}\n        value={value}\n        triggerRef={triggerRef}\n        contentRef={contentRef}\n        focusProxyRef={focusProxyRef}\n        wasEscapeCloseRef={wasEscapeCloseRef}\n        onEntryKeyDown={handleContentEntry}\n        onFocusProxyEnter={handleContentEntry}\n        onRootContentClose={handleContentExit}\n        onContentFocusOutside={handleContentExit}\n      >\n        <Primitive.li {...itemProps} ref={forwardedRef} />\n      </NavigationMenuItemContextProvider>\n    );\n  }\n);\n\nNavigationMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'NavigationMenuTrigger';\n\ntype NavigationMenuTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface NavigationMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst NavigationMenuTrigger = React.forwardRef<\n  NavigationMenuTriggerElement,\n  NavigationMenuTriggerProps\n>((props: ScopedProps<NavigationMenuTriggerProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuTriggerElement>(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n\n  return (\n    <>\n      <Collection.ItemSlot scope={__scopeNavigationMenu} value={itemContext.value}>\n        <FocusGroupItem asChild>\n          <Primitive.button\n            id={triggerId}\n            disabled={disabled}\n            data-disabled={disabled ? '' : undefined}\n            data-state={getOpenState(open)}\n            aria-expanded={open}\n            aria-controls={contentId}\n            {...triggerProps}\n            ref={composedRefs}\n            onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n              wasClickCloseRef.current = false;\n              itemContext.wasEscapeCloseRef.current = false;\n            })}\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse(() => {\n                if (\n                  disabled ||\n                  wasClickCloseRef.current ||\n                  itemContext.wasEscapeCloseRef.current ||\n                  hasPointerMoveOpenedRef.current\n                )\n                  return;\n                context.onTriggerEnter(itemContext.value);\n                hasPointerMoveOpenedRef.current = true;\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse(() => {\n                if (disabled) return;\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n              })\n            )}\n            onClick={composeEventHandlers(props.onClick, () => {\n              context.onItemSelect(itemContext.value);\n              wasClickCloseRef.current = open;\n            })}\n            onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n              const verticalEntryKey = context.dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n              const entryKey = { horizontal: 'ArrowDown', vertical: verticalEntryKey }[\n                context.orientation\n              ];\n              if (open && event.key === entryKey) {\n                itemContext.onEntryKeyDown();\n                // Prevent FocusGroupItem from handling the event\n                event.preventDefault();\n              }\n            })}\n          />\n        </FocusGroupItem>\n      </Collection.ItemSlot>\n\n      {/* Proxy tab order between trigger and content */}\n      {open && (\n        <>\n          <VisuallyHiddenPrimitive.Root\n            aria-hidden\n            tabIndex={0}\n            ref={itemContext.focusProxyRef}\n            onFocus={(event) => {\n              const content = itemContext.contentRef.current;\n              const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n              const wasTriggerFocused = prevFocusedElement === ref.current;\n              const wasFocusFromContent = content?.contains(prevFocusedElement);\n\n              if (wasTriggerFocused || !wasFocusFromContent) {\n                itemContext.onFocusProxyEnter(wasTriggerFocused ? 'start' : 'end');\n              }\n            }}\n          />\n\n          {/* Restructure a11y tree to make content accessible to screen reader when using the viewport */}\n          {context.viewport && <span aria-owns={contentId} />}\n        </>\n      )}\n    </>\n  );\n});\n\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'NavigationMenuLink';\nconst LINK_SELECT = 'navigationMenu.linkSelect';\n\ntype NavigationMenuLinkElement = React.ElementRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = Radix.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface NavigationMenuLinkProps extends Omit<PrimitiveLinkProps, 'onSelect'> {\n  active?: boolean;\n  onSelect?: (event: Event) => void;\n}\n\nconst NavigationMenuLink = React.forwardRef<NavigationMenuLinkElement, NavigationMenuLinkProps>(\n  (props: ScopedProps<NavigationMenuLinkProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;\n\n    return (\n      <FocusGroupItem asChild>\n        <Primitive.a\n          data-active={active ? '' : undefined}\n          aria-current={active ? 'page' : undefined}\n          {...linkProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(\n            props.onClick,\n            (event) => {\n              const target = event.target as HTMLElement;\n              const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n                bubbles: true,\n                cancelable: true,\n              });\n              target.addEventListener(LINK_SELECT, (event) => onSelect?.(event), { once: true });\n              dispatchDiscreteCustomEvent(target, linkSelectEvent);\n\n              if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n                const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n                  bubbles: true,\n                  cancelable: true,\n                });\n                dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n              }\n            },\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </FocusGroupItem>\n    );\n  }\n);\n\nNavigationMenuLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'NavigationMenuIndicator';\n\ntype NavigationMenuIndicatorElement = NavigationMenuIndicatorImplElement;\ninterface NavigationMenuIndicatorProps extends NavigationMenuIndicatorImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuIndicator = React.forwardRef<\n  NavigationMenuIndicatorElement,\n  NavigationMenuIndicatorProps\n>((props: ScopedProps<NavigationMenuIndicatorProps>, forwardedRef) => {\n  const { forceMount, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n\n  return context.indicatorTrack\n    ? ReactDOM.createPortal(\n        <Presence present={forceMount || isVisible}>\n          <NavigationMenuIndicatorImpl {...indicatorProps} ref={forwardedRef} />\n        </Presence>,\n        context.indicatorTrack\n      )\n    : null;\n});\n\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\n\ntype NavigationMenuIndicatorImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuIndicatorImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuIndicatorImpl = React.forwardRef<\n  NavigationMenuIndicatorImplElement,\n  NavigationMenuIndicatorImplProps\n>((props: ScopedProps<NavigationMenuIndicatorImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState<NavigationMenuTriggerElement | null>(\n    null\n  );\n  const [position, setPosition] = React.useState<{ size: number; offset: number } | null>(null);\n  const isHorizontal = context.orientation === 'horizontal';\n  const isVisible = Boolean(context.value);\n\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n\n  /**\n   * Update position when the indicator or parent track size changes\n   */\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop,\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n\n  // We need to wait for the indicator position to be available before rendering to\n  // snap immediately into position rather than transitioning from initial\n  return position ? (\n    <Primitive.div\n      aria-hidden\n      data-state={isVisible ? 'visible' : 'hidden'}\n      data-orientation={context.orientation}\n      {...indicatorProps}\n      ref={forwardedRef}\n      style={{\n        position: 'absolute',\n        ...(isHorizontal\n          ? {\n              left: 0,\n              width: position.size + 'px',\n              transform: `translateX(${position.offset}px)`,\n            }\n          : {\n              top: 0,\n              height: position.size + 'px',\n              transform: `translateY(${position.offset}px)`,\n            }),\n        ...indicatorProps.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'NavigationMenuContent';\n\ntype NavigationMenuContentElement = NavigationMenuContentImplElement;\ninterface NavigationMenuContentProps\n  extends Omit<NavigationMenuContentImplProps, keyof NavigationMenuContentImplPrivateProps> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuContent = React.forwardRef<\n  NavigationMenuContentElement,\n  NavigationMenuContentProps\n>((props: ScopedProps<NavigationMenuContentProps>, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps,\n  };\n\n  return !context.viewport ? (\n    <Presence present={forceMount || open}>\n      <NavigationMenuContentImpl\n        data-state={getOpenState(open)}\n        {...commonProps}\n        ref={composedRefs}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n        onPointerLeave={composeEventHandlers(\n          props.onPointerLeave,\n          whenMouse(context.onContentLeave)\n        )}\n        style={{\n          // Prevent interaction when animating out\n          pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n          ...commonProps.style,\n        }}\n      />\n    </Presence>\n  ) : (\n    <ViewportContentMounter forceMount={forceMount} {...commonProps} ref={composedRefs} />\n  );\n});\n\nNavigationMenuContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ViewportContentMounterElement = NavigationMenuContentImplElement;\ninterface ViewportContentMounterProps extends NavigationMenuContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ViewportContentMounter = React.forwardRef<\n  ViewportContentMounterElement,\n  ViewportContentMounterProps\n>((props: ScopedProps<ViewportContentMounterProps>, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const { onViewportContentChange, onViewportContentRemove } = context;\n\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props,\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n\n  // Content is proxied into the viewport\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_CONTENT_DISMISS = 'navigationMenu.rootContentDismiss';\n\ntype MotionAttribute = 'to-start' | 'to-end' | 'from-start' | 'from-end';\ntype NavigationMenuContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\n\ninterface NavigationMenuContentImplPrivateProps {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement>;\n  focusProxyRef: React.RefObject<FocusProxyElement>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onContentFocusOutside(): void;\n  onRootContentClose(): void;\n}\ninterface NavigationMenuContentImplProps\n  extends Omit<DismissableLayerProps, 'onDismiss'>,\n    NavigationMenuContentImplPrivateProps {}\n\nconst NavigationMenuContentImpl = React.forwardRef<\n  NavigationMenuContentImplElement,\n  NavigationMenuContentImplProps\n>((props: ScopedProps<NavigationMenuContentImplProps>, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuContentImplElement>(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef<MotionAttribute | null>(null);\n\n  const { onItemDismiss } = context;\n\n  React.useEffect(() => {\n    const content = ref.current;\n\n    // Bubble dismiss to the root content node and focus its trigger\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map((item) => item.value);\n    if (context.dir === 'rtl') values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n\n    // We only want to update selected and the last selected content\n    // this avoids animations being interrupted outside of that range\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n\n    const attribute = (() => {\n      // Don't provide a direction on the initial open\n      if (index !== prevIndex) {\n        // If we're moving to this item from another\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? 'from-end' : 'from-start';\n        // If we're leaving this item for another\n        if (wasSelected && index !== -1) return index > prevIndex ? 'to-start' : 'to-end';\n      }\n      // Otherwise we're entering from closed or leaving the list\n      // entirely and should not animate in any direction\n      return null;\n    })();\n\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n\n  return (\n    <FocusGroup asChild>\n      <DismissableLayer\n        id={contentId}\n        aria-labelledby={triggerId}\n        data-motion={motionAttribute}\n        data-orientation={context.orientation}\n        {...contentProps}\n        ref={composedRefs}\n        onDismiss={() => {\n          const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true,\n          });\n          ref.current?.dispatchEvent(rootContentDismissEvent);\n        }}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          onContentFocusOutside();\n          const target = event.target as HTMLElement;\n          // Only dismiss content when focus moves outside of the menu\n          if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n          if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n          if (isTabKey) {\n            const candidates = getTabbableCandidates(event.currentTarget);\n            const focusedElement = document.activeElement;\n            const index = candidates.findIndex((candidate) => candidate === focusedElement);\n            const isMovingBackwards = event.shiftKey;\n            const nextCandidates = isMovingBackwards\n              ? candidates.slice(0, index).reverse()\n              : candidates.slice(index + 1, candidates.length);\n\n            if (focusFirst(nextCandidates)) {\n              // prevent browser tab keydown because we've handled focus\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges\n              // so focus the proxy and let browser handle\n              // tab/shift+tab keypress on the proxy instead\n              focusProxyRef.current?.focus();\n            }\n          }\n        })}\n        onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (event) => {\n          // prevent the dropdown from reopening\n          // after the escape key has been pressed\n          wasEscapeCloseRef.current = true;\n        })}\n      />\n    </FocusGroup>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'NavigationMenuViewport';\n\ntype NavigationMenuViewportElement = NavigationMenuViewportImplElement;\ninterface NavigationMenuViewportProps\n  extends Omit<NavigationMenuViewportImplProps, 'children' | 'activeContentValue'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuViewport = React.forwardRef<\n  NavigationMenuViewportElement,\n  NavigationMenuViewportProps\n>((props: ScopedProps<NavigationMenuViewportProps>, forwardedRef) => {\n  const { forceMount, ...viewportProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n\n  return (\n    <Presence present={forceMount || open}>\n      <NavigationMenuViewportImpl {...viewportProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype NavigationMenuViewportImplElement = React.ElementRef<typeof Primitive.div>;\ninterface NavigationMenuViewportImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuViewportImpl = React.forwardRef<\n  NavigationMenuViewportImplElement,\n  NavigationMenuViewportImplProps\n>((props: ScopedProps<NavigationMenuViewportImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(\n    CONTENT_NAME,\n    props.__scopeNavigationMenu\n  );\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n  const [content, setContent] = React.useState<NavigationMenuContentElement | null>(null);\n  const viewportWidth = size ? size?.width + 'px' : undefined;\n  const viewportHeight = size ? size?.height + 'px' : undefined;\n  const open = Boolean(context.value);\n  // We persist the last active content value as the viewport may be animating out\n  // and we want the content to remain mounted for the lifecycle of the viewport.\n  const activeContentValue = open ? context.value : context.previousValue;\n\n  /**\n   * Update viewport size to match the active content node.\n   * We prefer offset dimensions over `getBoundingClientRect` as the latter respects CSS transform.\n   * For example, if content animates in from `scale(0.5)` the dimensions would be anything\n   * from `0.5` to `1` of the intended size.\n   */\n  const handleSizeChange = () => {\n    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });\n  };\n  useResizeObserver(content, handleSizeChange);\n\n  return (\n    <Primitive.div\n      data-state={getOpenState(open)}\n      data-orientation={context.orientation}\n      {...viewportImplProps}\n      ref={composedRefs}\n      style={{\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n        ['--radix-navigation-menu-viewport-width' as any]: viewportWidth,\n        ['--radix-navigation-menu-viewport-height' as any]: viewportHeight,\n        ...viewportImplProps.style,\n      }}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave))}\n    >\n      {Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props }]) => {\n        const isActive = activeContentValue === value;\n        return (\n          <Presence key={value} present={forceMount || isActive}>\n            <NavigationMenuContentImpl\n              {...props}\n              ref={composeRefs(ref, (node) => {\n                // We only want to update the stored node when another is available\n                // as we need to smoothly transition between them.\n                if (isActive && node) setContent(node);\n              })}\n            />\n          </Presence>\n        );\n      })}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_GROUP_NAME = 'FocusGroup';\n\ntype FocusGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface FocusGroupProps extends PrimitiveDivProps {}\n\nconst FocusGroup = React.forwardRef<FocusGroupElement, FocusGroupProps>(\n  (props: ScopedProps<FocusGroupProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.Provider scope={__scopeNavigationMenu}>\n        <FocusGroupCollection.Slot scope={__scopeNavigationMenu}>\n          <Primitive.div dir={context.dir} {...groupProps} ref={forwardedRef} />\n        </FocusGroupCollection.Slot>\n      </FocusGroupCollection.Provider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_KEYS = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\nconst FOCUS_GROUP_ITEM_NAME = 'FocusGroupItem';\n\ntype FocusGroupItemElement = React.ElementRef<typeof Primitive.button>;\ninterface FocusGroupItemProps extends PrimitiveButtonProps {}\n\nconst FocusGroupItem = React.forwardRef<FocusGroupItemElement, FocusGroupItemProps>(\n  (props: ScopedProps<FocusGroupItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.ItemSlot scope={__scopeNavigationMenu}>\n        <Primitive.button\n          {...groupProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isFocusNavigationKey = ['Home', 'End', ...ARROW_KEYS].includes(event.key);\n            if (isFocusNavigationKey) {\n              let candidateNodes = getItems().map((item) => item.ref.current!);\n              const prevItemKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const prevKeys = [prevItemKey, 'ArrowUp', 'End'];\n              if (prevKeys.includes(event.key)) candidateNodes.reverse();\n              if (ARROW_KEYS.includes(event.key)) {\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = candidateNodes.slice(currentIndex + 1);\n              }\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n\n              // Prevent page scroll while navigating\n              event.preventDefault();\n            }\n          })}\n        />\n      </FocusGroupCollection.ItemSlot>\n    );\n  }\n);\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nfunction removeFromTabOrder(candidates: HTMLElement[]) {\n  candidates.forEach((candidate) => {\n    candidate.dataset.tabindex = candidate.getAttribute('tabindex') || '';\n    candidate.setAttribute('tabindex', '-1');\n  });\n  return () => {\n    candidates.forEach((candidate) => {\n      const prevTabIndex = candidate.dataset.tabindex as string;\n      candidate.setAttribute('tabindex', prevTabIndex);\n    });\n  };\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = NavigationMenu;\nconst Sub = NavigationMenuSub;\nconst List = NavigationMenuList;\nconst Item = NavigationMenuItem;\nconst Trigger = NavigationMenuTrigger;\nconst Link = NavigationMenuLink;\nconst Indicator = NavigationMenuIndicator;\nconst Content = NavigationMenuContent;\nconst Viewport = NavigationMenuViewport;\n\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n};\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n};\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_panel.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_panel.tsx\");\n  import.meta.hot.lastModified = \"1696791435430.1187\";\n}\n// REMIX HMR END\n\nimport { HamburgerMenuIcon } from \"@radix-ui/react-icons\";\nimport * as NavigationMenu from \"@radix-ui/react-navigation-menu\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Outlet, useLoaderData, Link } from \"@remix-run/react\";\nimport React from \"react\";\nimport { auth } from \"./login.server\";\nexport const loader = async ({\n  request\n}) => {\n  const profile = await auth.isAuthenticated(request, {});\n  return json({\n    profile: profile\n  });\n};\nexport default function Index() {\n  _s();\n  const {\n    profile\n  } = useLoaderData();\n  return <div className=\"w-screen h-screen\">\n      <NavigationMenu.Root className=\"relative flex justify-between w-screen h-20 p-2 list-none bg-gray-950\">\n        <NavigationMenu.Item className=\"flex items-center pl-2\">\n          <NavigationMenu.Link>\n            <span className=\"text-3xl text-white\">NanoRes</span> <span className=\"text-rg text-gray-650\">Cloud</span>\n          </NavigationMenu.Link>\n        </NavigationMenu.Item>\n        {profile && <NavigationMenu.Item className=\"flex items-center p-2 text-2xl relative\">\n          <NavigationMenu.Trigger>\n              <HamburgerMenuIcon className=\"w-6 h-auto m-4\"></HamburgerMenuIcon>\n          </NavigationMenu.Trigger>\n          <NavigationMenu.Content asChild className=\"absolute top-full right-0 bg-gray-900 pb-4 rounded-lg shadow-2xl\">\n            <div className=\"w-80 flex flex-col\">\n              <div className=\"text-base mx-auto mb-4 mt-2 text-gray-400\">\n                {profile._json?.email}\n              </div>\n              <div className=\"text-2xl mx-auto my-2\">\n                Hi, {profile._json?.name}\n              </div>\n              <div className=\" text-lg mx-auto p-2 my-2 text-gray-400 border-gray-400 border-2 rounded-lg\">\n                <Link to=\"/panel\">\n                  <button className=\"\">\n                    NanoRes Cloud Panel\n                  </button>\n                </Link>\n              </div>\n            </div>\n          </NavigationMenu.Content>\n        </NavigationMenu.Item>}\n        {profile !== null ? <></> : <div className=\"flex items-center\">\n            <NavigationMenu.Item className=\"flex items-center px-2 py-2 text-xl text-white border-2 border-gray-550 rounded-lg\">\n                <Form method=\"post\" action=\"/login\">\n                  <button>Get Started</button>\n                </Form>\n            </NavigationMenu.Item>\n          </div>}\n      </NavigationMenu.Root>\n      <Outlet />\n    </div>;\n}\n_s(Index, \"6Tn5yyFZnzjmMVtfhGQIsThIAfU=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["CONTEXT_UPDATE", "POINTER_DOWN_OUTSIDE", "FOCUS_OUTSIDE", "originalBodyPointerEvents", "DismissableLayerContext", "React", "layers", "Set", "layersWithOutsidePointerEventsDisabled", "branches", "DismissableLayer", "props", "forwardedRef", "layerProps", "context", "node", "setNode", "ownerDocument", "globalThis", "document", "force", "composedRefs", "useComposedRefs", "Array", "from", "highestLayerWithOutsidePointerEventsDisabled", "slice", "highestLayerWithOutsidePointerEventsDisabledIndex", "indexOf", "index", "isBodyPointerEventsDisabled", "size", "isPointerEventsEnabled", "pointerDownOutside", "usePointerDownOutside", "event", "target", "isPointerDownOnBranch", "some", "branch", "contains", "onPointerDownOutside", "onInteractOutside", "defaultPrevented", "onDismiss", "focusOutside", "useFocusOutside", "isFocusInBranch", "onFocusOutside", "useEscapeKeydown", "isHighestLayer", "onEscapeKeyDown", "preventDefault", "disableOutsidePointerEvents", "body", "style", "pointerEvents", "add", "dispatchUpdate", "delete", "handleUpdate", "addEventListener", "removeEventListener", "$kqwpH$createElement", "undefined", "composeEventHandlers", "onFocusCapture", "onBlurCapture", "onPointerDownCapture", "usePointerDownOutside", "onPointerDownOutside", "ownerDocument", "globalThis", "document", "handlePointerDownOutside", "useCallbackRef", "isPointerInsideReactTreeRef", "React", "handleClickRef", "handlePointerDown", "event", "target", "current", "handleAndDispatchPointerDownOutsideEvent", "handleAndDispatchCustomEvent", "POINTER_DOWN_OUTSIDE", "eventDetail", "discrete", "originalEvent", "pointerType", "removeEventListener", "addEventListener", "once", "timerId", "window", "setTimeout", "clearTimeout", "onPointerDownCapture", "useFocusOutside", "onFocusOutside", "handleFocusOutside", "isFocusInsideReactTreeRef", "handleFocus", "FOCUS_OUTSIDE", "onFocusCapture", "onBlurCapture", "dispatchUpdate", "CustomEvent", "CONTEXT_UPDATE", "dispatchEvent", "name", "handler", "detail", "bubbles", "cancelable", "dispatchDiscreteCustomEvent", "usePrevious", "value", "ref", "React", "previous", "current", "VisuallyHidden", "React", "props", "forwardedRef", "$kVwnw$createElement", "position", "border", "width", "height", "padding", "margin", "overflow", "clip", "whiteSpace", "wordWrap", "style", "Root", "VisuallyHidden", "NAVIGATION_MENU_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "FocusGroupCollection", "useFocusGroupCollection", "createFocusGroupCollectionScope", "createNavigationMenuContext", "createNavigationMenuScope", "createContextScope", "NavigationMenuProviderImpl", "useNavigationMenuContext", "ViewportContentProvider", "useViewportContentContext", "NavigationMenu", "React", "props", "forwardedRef", "value", "valueProp", "NavigationMenuProps", "navigationMenu", "setNavigationMenu", "composedRef", "useComposedRefs", "node", "direction", "useDirection", "dir", "openTimerRef", "closeTimerRef", "skipDelayTimerRef", "isOpenDelayed", "setIsOpenDelayed", "setValue", "useControllableState", "prop", "onChange", "isOpen", "hasSkipDelayDuration", "skipDelayDuration", "window", "clearTimeout", "current", "setTimeout", "onValueChange", "defaultProp", "defaultValue", "startCloseTimer", "handleOpen", "itemValue", "handleDelayedOpen", "isOpenItem", "delayDuration", "$yHMN2$createElement", "__scopeNavigationMenu", "prevValue", "orientation", "NavigationMenuProvider", "props", "onContentLeave", "viewport", "setViewport", "React", "viewportContent", "setViewportContent", "Map", "indicatorTrack", "setIndicatorTrack", "$yHMN2$createElement", "usePrevious", "value", "useId", "useCallbackRef", "onTriggerEnter", "onTriggerLeave", "onContentEnter", "onItemSelect", "onItemDismiss", "contentValue", "contentData", "prevContent", "set", "has", "delete", "children", "ITEM_NAME", "NavigationMenuItemContextProvider", "useNavigationMenuItemContext", "createNavigationMenuContext", "NavigationMenuItem", "React", "props", "forwardedRef", "value", "valueProp", "itemProps", "autoValue", "useId", "contentRef", "triggerRef", "focusProxyRef", "restoreContentTabOrderRef", "wasEscapeCloseRef", "handleContentEntry", "side", "current", "candidates", "getTabbableCandidates", "length", "focusFirst", "reverse", "handleContentExit", "removeFromTabOrder", "$yHMN2$createElement", "__scopeNavigationMenu", "TRIGGER_NAME", "NavigationMenuTrigger", "React", "props", "forwardedRef", "triggerProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "itemContext", "useNavigationMenuItemContext", "ref", "composedRefs", "useComposedRefs", "triggerRef", "triggerId", "makeTriggerId", "baseId", "value", "contentId", "makeContentId", "hasPointerMoveOpenedRef", "wasClickCloseRef", "open", "$yHMN2$createElement", "$yHMN2$Fragment", "disabled", "undefined", "getOpenState", "composeEventHandlers", "onPointerEnter", "current", "wasEscapeCloseRef", "onPointerMove", "whenMouse", "onTriggerEnter", "onPointerLeave", "onTriggerLeave", "onClick", "onItemSelect", "onKeyDown", "event", "verticalEntryKey", "dir", "entryKey", "horizontal", "vertical", "orientation", "key", "onEntryKeyDown", "preventDefault", "focusProxyRef", "content", "contentRef", "prevFocusedElement", "relatedTarget", "wasTriggerFocused", "wasFocusFromContent", "contains", "onFocusProxyEnter", "viewport", "LINK_SELECT", "NavigationMenuLink", "React", "props", "forwardedRef", "linkProps", "$yHMN2$createElement", "active", "undefined", "composeEventHandlers", "onClick", "event", "target", "linkSelectEvent", "CustomEvent", "bubbles", "cancelable", "addEventListener", "onSelect", "once", "dispatchDiscreteCustomEvent", "defaultPrevented", "metaKey", "rootContentDismissEvent", "ROOT_CONTENT_DISMISS", "checkForDefaultPrevented", "CONTENT_NAME", "NavigationMenuContent", "React", "props", "forwardedRef", "contentProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "itemContext", "useNavigationMenuItemContext", "composedRefs", "useComposedRefs", "contentRef", "open", "value", "commonProps", "triggerRef", "focusProxyRef", "wasEscapeCloseRef", "onContentFocusOutside", "onRootContentClose", "viewport", "$yHMN2$createElement", "forceMount", "getOpenState", "composeEventHandlers", "onPointerEnter", "onContentEnter", "onPointerLeave", "whenMouse", "onContentLeave", "pointerEvents", "isRootMenu", "undefined", "style", "ViewportContentMounter", "React", "props", "forwardedRef", "context", "useNavigationMenuContext", "CONTENT_NAME", "__scopeNavigationMenu", "onViewportContentRemove", "useLayoutEffect", "onViewportContentChange", "value", "ref", "ROOT_CONTENT_DISMISS", "NavigationMenuContentImpl", "contentProps", "composedRefs", "useComposedRefs", "triggerId", "makeTriggerId", "baseId", "contentId", "makeContentId", "getItems", "useCollection", "prevMotionAttributeRef", "onItemDismiss", "content", "current", "isRootMenu", "handleClose", "onRootContentClose", "contains", "document", "activeElement", "triggerRef", "focus", "addEventListener", "removeEventListener", "motionAttribute", "items", "values", "map", "item", "dir", "reverse", "index", "indexOf", "prevIndex", "previousValue", "isSelected", "wasSelected", "attribute", "$yHMN2$createElement", "orientation", "rootContentDismissEvent", "Event", "bubbles", "cancelable", "dispatchEvent", "composeEventHandlers", "onFocusOutside", "event", "onContentFocusOutside", "target", "rootNavigationMenu", "preventDefault", "onPointerDownOutside", "isTrigger", "some", "isRootViewport", "viewport", "onKeyDown", "isMetaKey", "altKey", "ctrlKey", "metaKey", "isTabKey", "key", "candidates", "getTabbableCandidates", "currentTarget", "focusedElement", "findIndex", "candidate", "isMovingBackwards", "shiftKey", "nextCandidates", "slice", "length", "focusFirst", "focusProxyRef", "onEscapeKeyDown", "wasEscapeCloseRef", "FOCUS_GROUP_NAME", "FocusGroup", "React", "props", "forwardedRef", "groupProps", "context", "useNavigationMenuContext", "__scopeNavigationMenu", "$yHMN2$createElement", "dir", "ARROW_KEYS", "FOCUS_GROUP_ITEM_NAME", "FocusGroupItem", "getItems", "useFocusGroupCollection", "composeEventHandlers", "onKeyDown", "event", "isFocusNavigationKey", "includes", "key", "candidateNodes", "map", "item", "ref", "current", "prevItemKey", "prevKeys", "reverse", "currentIndex", "indexOf", "currentTarget", "slice", "setTimeout", "focusFirst", "preventDefault", "getTabbableCandidates", "container", "nodes", "walker", "document", "createTreeWalker", "NodeFilter", "SHOW_ELEMENT", "acceptNode", "node", "isHiddenInput", "tagName", "type", "disabled", "hidden", "FILTER_SKIP", "tabIndex", "FILTER_ACCEPT", "nextNode", "push", "currentNode", "candidates", "previouslyFocusedElement", "activeElement", "some", "candidate", "focus", "removeFromTabOrder", "forEach", "dataset", "tabindex", "getAttribute", "setAttribute", "prevTabIndex", "getOpenState", "open", "makeTriggerId", "baseId", "value", "makeContentId", "whenMouse", "handler", "event", "pointerType", "undefined", "Root", "NavigationMenu", "Item", "NavigationMenuItem", "Trigger", "NavigationMenuTrigger", "Link", "NavigationMenuLink", "Content", "NavigationMenuContent"]
}
